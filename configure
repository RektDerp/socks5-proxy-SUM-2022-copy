#!/usr/bin/bash

basedir=$PWD
builddir=$basedir/build/
pkgbuild_dir=$basedir/installer/arch-scripted/
Qt=Qt5

clean () {
    cd "$basedir" || exit
    rm -rf "lib/*.a" "$builddir" "*.db" "*.log" "installer/arch/pkg" "installer/arch/src" "installer/arch/*.zst"
}

configure_linux () {
    echo "Configuring for linux"
    echo "flags $ADDITIONAL_FLAGS"
    mkdir -p "$builddir/bin"
    cmake -S. -B "$builddir" $ADDITIONAL_FLAGS
}

configure_windows () {
    echo "Configuring for windows"
    echo "flags $ADDITIONAL_FLAGS"
    mkdir -p "$builddir/bin"
    ADDITIONAL_FLAGS="$ADDITIONAL_FLAGS -D Qtdir=$Qtdir"
    cmake -S. -B "$builddir" -G "MinGW Makefiles" -D CMAKE_SYSTEM_NAME="Windows" -D CMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ -D CMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -D CMAKE_HOST_SYSTEM_NAME="UNIX" -D CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES="" $ADDITIONAL_FLAGS
}

build () {
    echo "building"
    echo "Build directory: $builddir"
    cd "$builddir" || exit
    cmake --build .
    bstatus=$?
}

copy_resources () {

    pkgdir="$builddir/$deb_packagename/"
    cp "$pkgbuild_dir/PKGBUILD" "$pkgbuild_dir/socks5-proxy.install" "$builddir"
    mkdir -p "$builddir/installer"
    cp "$basedir/config.txt" "$builddir"
    cp "$basedir/icon.png" "$builddir/installer/socks5-interface.png"
    cp "$basedir/installer/socks5-interface.desktop" "$builddir/installer/socks5-interface.desktop"
    cp "$basedir/service/linux/socks5-proxy.service" "$builddir"

}

package_arch () {
  echo "packaging for Arch linux"
  if which makepkg > /dev/null 2>&1
  then
      copy_resources
      cd "$builddir" || exit
      Qt=${Qt,,}
      echo "----------------------- qt $Qt"
      sed -i "s/qt5/$Qt/g" PKGBUILD
      makepkg $force_arg
  else
      echo -e "makepkg not found.\nCannot package for Arch Linux"
  fi
}

package_deb () {
    deb_packagename="socks5-proxy-$Qt-2.2.8-1_amd64"
    echo "packaging deb"
    if which dpkg-deb > /dev/null 2>&1
    then
    copy_resources
    cd "$builddir" || exit


    mkdir -p "$pkgdir/usr/bin/"
    mkdir -p "$pkgdir/etc/"
    mkdir -p "$pkgdir/usr/share/applications/"
    mkdir -p "$pkgdir/usr/share/icons/"
    mkdir -p "$pkgdir/usr/lib/systemd/system/"
    mkdir -p "$pkgdir/tmp"

    cp bin/main "$pkgdir"/usr/bin/socks5-proxy
    cp bin/interface "$pkgdir"/usr/bin/socks5-interface
    cp config.txt  "$pkgdir"/etc/socks5-config.txt
    cp installer/socks5-interface.desktop "$pkgdir"/usr/share/applications/socks5-interface.desktop
    cp installer/socks5-interface.png "$pkgdir"/usr/share/icons/socks5-interface.png
    cp socks5-proxy.service "$pkgdir"/usr/lib/systemd/system/socks5-proxy.service
    touch "$pkgdir"/tmp/sessions_stat.db
    chmod 666 "$pkgdir"/tmp/sessions_stat.db

    mkdir -p "$pkgdir"/DEBIAN
    case $Qt in
    Qt5)
    deps=("qtbase5-dev" "qml-module-qtquick-controls2" "qml-module-qtquick-controls")
    ;;
    Qt6)
    deps=("qt6-base-dev" "qt6-declarative-dev" "libsqlite3-dev" "libboost-all-dev" "qml6-module-qtquick-controls" "qml6-module-qtquick-layouts" "qml6-module-qtquick" "qml6-module-qtquick-templates" "qml6-module-qtquick-window" "qml6-module-qtqml-workerscript")
    ;;
    esac

    cat > "$pkgdir"/DEBIAN/control << EOM
Package: socks5-proxy
Version: 2.2.8
Architecture: amd64
Maintainer: Kyrychuk Anton <6377200@stud.nau.edu.ua>
Description: Apriorit project
Depends: $deps
EOM
    dpkg-deb --build --root-owner-group "$pkgdir"
    else
        echo -e "dpkg-deb not found.\nCannot package deb"
  fi

}

invalid () {
    printf "%s\nusage: x[\n" "$1"
}

cnt=1
while [ "$cnt" -lt "$(($# + 1))" ]
do
  i=${!cnt}
#echo "param $cnt / $#: $i"
  case $i in
    windows | Windows | WINDOWS)
        if [ "$linux" = "true" ]
        then
          invalid "cannnot compile for multiple platforms"
        else
          windows=true
        fi
        cnt=$((cnt + 1))
        continue
    ;;
    Linux | linux | LINUX)
        if [ "$windows" = "true" ]
        then
          invalid "cannnot compile for multiple platforms"
        else
          linux=true
        fi
        cnt=$((cnt + 1))
        continue
    ;;
    build | --build | -b)
        build_flg=true
        cnt=$((cnt + 1))
        continue
    ;;
    package | --package | -p)
        cnt=$((cnt + 1))
        case ${!cnt} in
            arch | a)
                package_flg=arch
                cnt=$((cnt + 1))
            ;;
            deb | debian | ubuntu)
                package_flg=deb
                cnt=$((cnt + 1))
            ;;
            *)
                echo "Package type: defaulting to arch"
                package_flg=arch
            ;;
        esac
        continue
    ;;
    -D)
        cnt=$((cnt + 1))
        if [[ ${!cnt} == *"Qt="* ]]
        then
            param=${!cnt}
            Qt=${param##Qt=}
            echo $Qt
        fi
        if [[ ${!cnt} == *"Qtdir="* ]]
        then
            Qtdir="${!cnt}"
            echo $Qtdir
        else
            ADDITIONAL_FLAGS="$ADDITIONAL_FLAGS-D ${!cnt} "
        fi
        cnt=$((cnt + 1))
        continue
    ;;
    -B)
        cnt=$((cnt + 1))
        builddir=${!cnt}
        cnt=$((cnt + 1))
        continue
    ;;
    -f)
        force_arg="-f"
        cnt=$((cnt + 1))
        continue
    ;;
    clean | --clean | -c)
        clean=true
        cnt=$((cnt + 1))
        continue
    ;;
    qtdir | Qtdir | -qd | --qtdir)
        cnt=$((cnt + 1))
        Qtdir="${!cnt}"
        cnt=$((cnt + 1))
        continue
    ;;
    *)
      invalid "Invalid command $i"
      cnt=$((cnt + 1))
      continue
    ;;
  esac
done

if [ "$windows" == true ] && [ "$Qtdir" == "" ]
then
  echo -e "Warning! Windows build chosen, but Qt root directory is not specified, the build will likely fail. Continue?\nHint: Set path to build itself, i.e directory containing ./bin ./lib ./include directories, not the parent directory\n[S]pecify path [Y]es [N]o"
  read answer
  case $answer in
    y | Y | yes | Yes | YES)
    ;;
    S | s | Specify | "Specify path")
      echo "Enter path:"
      read Qtdir
    ;;
    *)
      exit 0
    ;;
  esac
fi

if [ "$clean" = true ]
then
  echo "clean"
  clean
fi

if [ "$linux" = true ]
then
  configure_linux
elif [ "$windows" = true ]
then
  configure_windows
else
  echo "No configuration parameters were passed. Defaulting to configure linux"
  configure_linux
fi

if [ "$build_flg" = true ] || [ "$package_flg" != "" ]; then build; fi

if [ "$package_flg" != "" ]
then
    if [ "$bstatus" = 0 ]
    then
        package_$package_flg
    else
        echo "Build failed. Skipping package step."
    fi
fi
